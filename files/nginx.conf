# Defines user and group credentials used by worker processes. If group is
# omitted, a group whose name equals that of user is used.
user    nginx;

# Defines the number of worker processes.    Setting it to the number of
# available CPU cores should be a good start. The value `auto` will try to
# autodetect that.
worker_processes auto;

# Configures logging to `/var/log/...`. Log level `error` is used by default.
error_log    /var/log/nginx/error.log;

# Defines a file that will store the process ID of the main process. This needs
# to match the Systemd unit file.
pid /run/nginx.pid;


events {
# Sets the maximum number of simultaneous connections that can be opened by
# a worker process.
    worker_connections 1024;
}


http {
    # Include mime types for different file extensions.
    include /etc/nginx/mime.types;

    # Defines the default MIME type of a response.
    default_type application/octet-stream;

    # Sendfile copies data between one file descriptor and other from within the
    # kernel. This is more efficient than read() and write() since they require
    # transferring data to and from the user space.
    sendfile on;

    # Todo: Write explanation
    # https://t37.net/nginx-optimization-understanding-sendfile-tcp_nodelay-and-tcp_nopush.html
    tcp_nopush on;
    tcp_nodelay on;

    # Disable access log.
    access_log off;

    # Enable on-the-fly gzip compression for larger plain text files and for
    # proxies applications.
    gzip            on;
    gzip_comp_level 2;
    gzip_min_length 1000;
    gzip_proxied    expired no-cache no-store private auth;
    gzip_types      text/plain
                    application/x-javascript
                    text/xml
                    text/css
                    application/xml;

    # Do not send the nginx version number in error pages and Server header
    server_tokens off;

    # Config to not allow the browser to render the page inside an frame or
    # iframe and avoid clickjacking [1].    If you need to allow [i]frames, you
    # can use SAMEORIGIN or even set an uri with ALLOW-FROM uri [2].
    # [1] http://en.wikipedia.org/wiki/Clickjacking
    # [2] https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options SAMEORIGIN;

    # When serving user-supplied content, include a X-Content-Type-Options:
    # nosniff header along with the Content-Type: header, to disable
    # content-type sniffing on some browsers.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-Content-Type-Options nosniff;

    # This header enables the cross-site scripting (XSS) filter built into most
    # recent web browsers.    It's usually enabled by default anyway, so the role
    # of this header is to re-enable the filter for this particular website if
    # it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";

    # With Content Security Policy (CSP) enabled and a browser that supports it
    # [1] you can tell the browser that it can only download content from the
    # domains you explicitly allow [2, 3]
    # [1] http://caniuse.com/#feat=contentsecuritypolicy
    # [2] http://www.html5rocks.com/en/tutorials/security/content-security-policy/
    # [3] https://www.owasp.org/index.php/Content_Security_Policy
    add_header Content-Security-Policy "default-src 'self'";


    # Turn off old and possibly unsafe SSL protocols. TLSv1 is still necessary
    # for some older devices but I do not care.
    ssl_protocols TLSv1.1 TLSv1.2;

    # The Online Certificate Status Protocol (OCSP) is an Internet protocol used
    # for obtaining the revocation status of an X.509 digital certificate.
    ssl_stapling on;
    ssl_stapling_verify on;

    # Defines files that will be used as an index. By default we will try for
    # html files.
    index index.html index.htm;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    include /etc/nginx/conf.d/*.conf;

}
